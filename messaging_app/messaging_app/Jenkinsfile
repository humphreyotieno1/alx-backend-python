pipeline {
    agent {
        docker {
            image 'python:3.10'
            args '-u 0:0'  // Run as root to manage Docker
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = 'messaging-app'
        DOCKER_TAG = "build-${BUILD_NUMBER}"
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/humphreyotieno1/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                python -m venv venv
                . venv/bin/activate
                pip3 install -r messaging_app/requirements.txt
                pip3 install pytest pytest-django pytest-cov flake8
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                . venv/bin/activate
                python manage.py test --noinput
                pytest --junit-xml=test-reports/results.xml
                '''
                junit 'test-reports/results.xml'
            }
        }

        stage('Code Quality') {
            steps {
                sh '''
                . venv/bin/activate
                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def customImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f messaging_app/Dockerfile .")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}
